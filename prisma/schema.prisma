// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  credits       Int       @default(15) // 15 free credits on signup
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  transactions  CreditTransaction[]
  lookups       CompanyLookup[]
  teams         TeamMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Billing and Subscriptions
model Subscription {
  id                  String              @id @default(cuid())
  userId              String
  stripeCustomerId    String?
  stripePriceId       String?
  stripeSubscriptionId String?
  stripePaymentIntentId String?
  status              SubscriptionStatus
  currentPeriodStart  DateTime?
  currentPeriodEnd    DateTime?
  cancelAtPeriodEnd   Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model CreditTransaction {
  id          String           @id @default(cuid())
  userId      String
  amount      Int
  type        TransactionType
  description String
  metadata    Json?
  createdAt   DateTime         @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("credit_transactions")
}

// Company Research
model CompanyLookup {
  id          String   @id @default(cuid())
  userId      String
  domain      String
  email       String?
  rawData     Json?
  enrichments Json?
  creditsUsed Int      @default(1)
  status      LookupStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("company_lookups")
}

// Team Management
model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members TeamMember[]
  credits  TeamCredit[]

  @@map("teams")
}

model TeamMember {
  id     String   @id @default(cuid())
  userId String
  teamId String
  role   TeamRole @default(MEMBER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model TeamCredit {
  id          String   @id @default(cuid())
  teamId      String
  amount      Int
  type        TransactionType
  description String
  createdAt   DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("team_credits")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAST_DUE
  UNPAID
  TRIALING
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

enum TransactionType {
  PURCHASED
  BONUS
  REFUND
  USED
  EXPIRED
  SUBSCRIPTION
}

enum LookupStatus {
  PENDING
  PROCESSING
  COMPLETED
  ERROR
  CANCELLED
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}